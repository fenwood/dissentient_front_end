// src/image.tsx
import * as React2 from "react";
import { transformProps } from "@unpic/core";

// src/camelize.ts
import * as React from "react";
var nestedKeys = /* @__PURE__ */ new Set(["style"]);
var isNewReact = "use" in React;
var fixedMap = {
  srcset: "srcSet",
  fetchpriority: isNewReact ? "fetchPriority" : "fetchpriority"
};
var camelize = (key) => {
  if (key.startsWith("data-") || key.startsWith("aria-")) {
    return key;
  }
  return fixedMap[key] || key.replace(/-./g, (suffix) => suffix[1].toUpperCase());
};
function camelizeProps(props) {
  return Object.fromEntries(
    Object.entries(props).map(([k, v]) => [
      camelize(k),
      nestedKeys.has(k) && v && typeof v !== "string" ? camelizeProps(v) : v
    ])
  );
}

// src/image.tsx
import { jsx } from "react/jsx-runtime";
var Image = React2.forwardRef(
  function Image2(props, ref) {
    const camelizedProps = camelizeProps(transformProps(props));
    return /* @__PURE__ */ jsx("img", { ...camelizedProps, ref });
  }
);

// src/source.tsx
import * as React3 from "react";
import { transformSourceProps } from "@unpic/core";
import { jsx as jsx2 } from "react/jsx-runtime";
var Source = React3.forwardRef(
  function Source2(props, ref) {
    const camelizedProps = camelizeProps(
      transformSourceProps(
        props
      )
    );
    return /* @__PURE__ */ jsx2("source", { ...camelizedProps, ref });
  }
);

export {
  Image,
  Source
};
