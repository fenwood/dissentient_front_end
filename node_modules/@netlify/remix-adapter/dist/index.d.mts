import { AppConfig } from '@remix-run/dev';
import { ServerBuild, AppLoadContext, EntryContext } from '@remix-run/node';
import { Context } from '@netlify/functions';

declare const config: AppConfig;

type LoadContext = AppLoadContext & Context;
/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action.
 */
type GetLoadContextFunction = (request: Request, context: Context) => Promise<LoadContext> | LoadContext;
type RequestHandler = (request: Request, context: LoadContext) => Promise<Response | void>;
declare function createRequestHandler({ build, mode, getLoadContext, }: {
    build: ServerBuild;
    mode?: string;
    getLoadContext?: GetLoadContextFunction;
}): RequestHandler;

declare function handleRequest(request: Request, responseStatusCode: number, responseHeaders: Headers, remixContext: EntryContext, loadContext: AppLoadContext): Promise<unknown>;

export { type GetLoadContextFunction, type RequestHandler, config, createRequestHandler, handleRequest };
