// src/plugin.ts
import { mkdir, writeFile } from "node:fs/promises";
import { join, relative, sep } from "node:path";
import { sep as posixSep } from "node:path/posix";

// package.json
var name = "@netlify/remix-adapter";
var version = "2.4.0";

// src/plugin.ts
var SERVER_ID = "virtual:netlify-server";
var RESOLVED_SERVER_ID = `\0${SERVER_ID}`;
var toPosixPath = (path) => path.split(sep).join(posixSep);
var serverCode = (
  /* js */
  `
import { createRequestHandler } from "@netlify/remix-adapter";
import * as build from "virtual:remix/server-build";
export default createRequestHandler({ build });
`
);
function generateNetlifyFunction(server) {
  return (
    /* js */
    `
    export { default } from "${server}";
    export const config = {
      name: "Remix server handler",
      generator: "${name}@${version}",
      path: "/*",
      preferStatic: true,
    };
    `
  );
}
function netlifyPlugin() {
  let resolvedConfig;
  let currentCommand;
  let isSsr;
  return {
    name: "vite-plugin-remix-netlify-functions",
    config(config, { command, isSsrBuild }) {
      var _a, _b;
      currentCommand = command;
      isSsr = isSsrBuild;
      if (command === "build") {
        if (isSsrBuild) {
          if (typeof ((_b = (_a = config.build) == null ? void 0 : _a.rollupOptions) == null ? void 0 : _b.input) === "string") {
            config.build.rollupOptions.input = {
              server: SERVER_ID,
              index: config.build.rollupOptions.input
            };
            if (config.build.rollupOptions.output && !Array.isArray(config.build.rollupOptions.output)) {
              config.build.rollupOptions.output.entryFileNames = "[name].js";
            }
          }
        }
      }
    },
    async resolveId(source) {
      if (source === SERVER_ID) {
        return RESOLVED_SERVER_ID;
      }
    },
    load(id) {
      if (id === RESOLVED_SERVER_ID) {
        return serverCode;
      }
    },
    async configResolved(config) {
      resolvedConfig = config;
    },
    async writeBundle() {
      if (currentCommand === "build" && isSsr) {
        const functionsDirectory = join(resolvedConfig.root, ".netlify/functions-internal");
        await mkdir(functionsDirectory, { recursive: true });
        const serverPath = join(resolvedConfig.build.outDir, "server.js");
        const relativeServerPath = toPosixPath(relative(functionsDirectory, serverPath));
        await writeFile(join(functionsDirectory, "remix-server.mjs"), generateNetlifyFunction(relativeServerPath));
      }
    }
  };
}
export {
  netlifyPlugin
};
