import React, { ComponentProps } from 'react';

/**
 * The function returns hidden styles for google recaptcha badge.
 *
 * @category Function
 * @returns Hidden styles
 */
declare const generateGoogleReCaptchaHiddenBadgeStyles: () => string;

type ContainerId = string;
type Container = ContainerId | HTMLElement;
declare namespace GoogleReCaptcha {
    type Language = string;
    type Type = 'v3' | 'v2-invisible' | 'v2-checkbox';
    type Host = 'recaptcha.net' | 'google.com';
    interface Script extends Omit<Partial<HTMLScriptElement>, 'src'> {
        appendTo?: 'body' | 'head';
    }
    type OptWidgetId = number | string;
    interface Action {
        action: string;
    }
    type Badge = 'inline' | 'bottomleft' | 'bottomright' | 'hidden';
    type Theme = 'dark' | 'light';
    interface Size {
        v3: 'invisible';
        'v2-invisible': 'invisible';
        'v2-checkbox': 'compact' | 'normal';
    }
    interface Parameters {
        sitekey?: string;
        action?: Action['action'];
        theme?: Theme;
        type?: Type;
        size?: Size[keyof Size];
        tabindex?: number;
        badge?: Badge;
        hl?: Language;
        callback?: (response: string) => void;
        'expired-callback'?: () => void;
        'error-callback'?: () => void;
    }
    interface Instance {
        render(container: Container, parameters?: Parameters, inherit?: boolean): number;
        reset(opt_widget_id?: OptWidgetId): void;
        getResponse(opt_widget_id?: OptWidgetId): string;
        execute(opt_widget_id?: OptWidgetId): Promise<void>;
        execute(siteKey: string, action: Action): Promise<string>;
        ready(callback: () => void): void;
    }
}

interface GenerateGoogleReCaptchaSrcParams {
    host?: GoogleReCaptcha.Host;
    isEnterprise?: boolean;
    render: string;
    hl?: string;
    badge?: Exclude<GoogleReCaptcha.Badge, 'hidden'>;
}
/**
 * Function to generate a script link src for google recaptcha.
 *
 * @category Function
 * @params object The link params.
 * @returns Script link src.
 */
declare const generateGoogleReCaptchaScriptSrc: ({ host, isEnterprise, render, hl, badge }: GenerateGoogleReCaptchaSrcParams) => string;

interface GoogleReCaptchaCheckboxProps extends Omit<ComponentProps<'div'>, 'onChange'> {
    id?: string;
    action?: string;
    className?: string;
    container?: ContainerId | HTMLElement;
    callback?: (token: string) => void;
    errorCallback?: () => void;
    expiredCallback?: () => void;
    language?: GoogleReCaptcha.Language;
    theme?: GoogleReCaptcha.Theme;
    size?: GoogleReCaptcha.Size['v2-checkbox'];
    onChange?: (token: string) => void;
}
declare const GoogleReCaptchaCheckbox: React.FC<GoogleReCaptchaCheckboxProps>;

interface GoogleReCaptchaDefaultProviderProps {
    siteKey: string;
    language?: string;
    isEnterprise?: boolean;
    onLoad?: (googleReCaptcha: GoogleReCaptcha.Instance) => Promise<void> | void;
    onError?: () => Promise<void>;
    host?: GoogleReCaptcha.Host;
    children?: React.ReactNode;
    scriptProps?: GoogleReCaptcha.Script;
}
interface Explicit {
    container?: ContainerId | HTMLElement;
    tabIndex?: number;
    inherit?: boolean;
    callback?: (token: string) => void;
    errorCallback?: () => void;
    expiredCallback?: () => void;
}
interface GoogleReCaptchaV2InvisibleProviderProps extends GoogleReCaptchaDefaultProviderProps {
    type: Extract<GoogleReCaptcha.Type, 'v2-invisible'>;
    explicit?: Explicit & {
        badge?: GoogleReCaptcha.Badge;
    };
}
interface GoogleReCaptchaV2CheckBoxProviderProps extends GoogleReCaptchaDefaultProviderProps {
    type: Extract<GoogleReCaptcha.Type, 'v2-checkbox'>;
    explicit?: Explicit & {
        container: ContainerId | HTMLElement;
        action?: GoogleReCaptcha.Action['action'];
        theme?: GoogleReCaptcha.Theme;
        size?: GoogleReCaptcha.Size['v2-checkbox'];
    };
}
interface GoogleReCaptchaV3ProviderProps extends GoogleReCaptchaDefaultProviderProps {
    type: Extract<GoogleReCaptcha.Type, 'v3'>;
    explicit?: Explicit & {
        badge?: GoogleReCaptcha.Badge;
    };
}
type GoogleReCaptchaProviderProps = GoogleReCaptchaV3ProviderProps | GoogleReCaptchaV2InvisibleProviderProps | GoogleReCaptchaV2CheckBoxProviderProps;
declare const GoogleReCaptchaProvider: React.FC<GoogleReCaptchaProviderProps>;

interface GoogleReCaptchaContextProps {
    googleReCaptcha: any;
    siteKey: string;
    isLoading: boolean;
    language?: GoogleReCaptcha.Language;
    executeV3?: (action: GoogleReCaptcha.Action['action']) => Promise<string>;
    executeV2Invisible?: (optWidgetId?: GoogleReCaptcha.OptWidgetId) => Promise<void>;
    reset?: (optWidgetId?: GoogleReCaptcha.OptWidgetId) => void;
    getResponse?: (optWidgetId?: GoogleReCaptcha.OptWidgetId) => void;
    render?: (container: Container, parameters?: GoogleReCaptcha.Parameters, inherit?: boolean) => void;
}

declare const useGoogleReCaptcha: () => GoogleReCaptchaContextProps;

interface WithGoogleReCaptchaParams {
    googleReCaptcha: GoogleReCaptchaContextProps;
}
declare const withGoogleReCaptcha: <OwnProps>(Component: React.ComponentType<OwnProps & WithGoogleReCaptchaParams>) => {
    (props: OwnProps & Partial<WithGoogleReCaptchaParams>): React.JSX.Element;
    displayName: string;
};

export { GoogleReCaptchaCheckbox, GoogleReCaptchaProvider, type GoogleReCaptchaProviderProps, type GoogleReCaptchaV2CheckBoxProviderProps, type GoogleReCaptchaV2InvisibleProviderProps, type GoogleReCaptchaV3ProviderProps, type WithGoogleReCaptchaParams, generateGoogleReCaptchaHiddenBadgeStyles, generateGoogleReCaptchaScriptSrc, useGoogleReCaptcha, withGoogleReCaptcha };
