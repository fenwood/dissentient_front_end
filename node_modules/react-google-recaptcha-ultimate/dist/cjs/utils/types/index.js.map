{"version":3,"file":"index.js","sources":["../../../../src/utils/types/index.ts"],"sourcesContent":["export type ContainerId = string;\nexport type Container = ContainerId | HTMLElement;\n\nexport namespace GoogleReCaptcha {\n  export type Language = string;\n  export type Type = 'v3' | 'v2-invisible' | 'v2-checkbox';\n  export type Host = 'recaptcha.net' | 'google.com';\n  export interface Script extends Omit<Partial<HTMLScriptElement>, 'src'> {\n    appendTo?: 'body' | 'head';\n  }\n\n  export type OptWidgetId = number | string;\n  export interface Action {\n    action: string;\n  }\n  export type Badge = 'inline' | 'bottomleft' | 'bottomright' | 'hidden';\n  export type Theme = 'dark' | 'light';\n  export interface Size {\n    v3: 'invisible';\n    'v2-invisible': 'invisible';\n    'v2-checkbox': 'compact' | 'normal';\n  }\n\n  export interface Parameters {\n    sitekey?: string;\n    action?: Action['action'];\n    theme?: Theme;\n    type?: Type;\n    size?: Size[keyof Size];\n    tabindex?: number;\n    badge?: Badge;\n    hl?: Language;\n    callback?: (response: string) => void;\n    'expired-callback'?: () => void;\n    'error-callback'?: () => void;\n  }\n\n  export interface Instance {\n    render(container: Container, parameters?: Parameters, inherit?: boolean): number;\n    reset(opt_widget_id?: OptWidgetId): void;\n    getResponse(opt_widget_id?: OptWidgetId): string;\n    execute(opt_widget_id?: OptWidgetId): Promise<void>;\n    execute(siteKey: string, action: Action): Promise<string>;\n    ready(callback: () => void): void;\n  }\n}\n"],"names":["GoogleReCaptcha"],"mappings":";qCAGiBA"}